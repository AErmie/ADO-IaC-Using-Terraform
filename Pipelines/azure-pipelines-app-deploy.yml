trigger:
  branches:
    include:
      - master
  paths:
    include:
      - /deploy-app.txt
      # - ../Terraform/Application/AppServicePlan.tf
      # - ../Terraform/Application/Databricks.tf
      # - ../Terraform/Application/DataFactory.tf
      # - ../Terraform/Application/FunctionApp.tf
      # - ../Terraform/Application/KeyVault.tf
      # - ../Terraform/Application/ResourceGroup.tf
      # - ../Terraform/Application/SQLDB.tf
      # - ../Terraform/Application/StorageAccount.tf

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: Terraform Sensitive Variables
  - group: Terraform Pipeline Variables
  - name: StateFile
    value: tf-statefile-app.tfstate

steps:
  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: "Install Terraform"
    inputs:
      terraformVersion: '0.13.3'

  - script: terraform version
    displayName: "Terraform Version"

  - script:  az login --service-principal -u $(application_id) -p $(spn-azuredevops-password2) --tenant $(tenant_id)
    displayName: "Log Into Azure"

  - script: terraform init -backend-config=resource_group_name=$(sa-resource_group) -backend-config="storage_account_name=$(storage_account)" -backend-config="container_name=$(blob_storage)" -backend-config="access_key=$(sa01-azdo-accesskey)" -backend-config="key=$(StateFile)"
    displayName: "Terraform Init"
    workingDirectory: $(System.DefaultWorkingDirectory)/Terraform/Application

  - script: terraform plan -var="client_id=$(application_id)" -var="client_secret=$(spn-azuredevops-password2)" -var="tenant_id=$(tenant_id)" -var="subscription_id=$(subscription_id)" -var-file="app.tfvars" -out="AppDeploy.plan"
    displayName: "Terraform Plan"
    workingDirectory: $(System.DefaultWorkingDirectory)/Terraform/Application

  - script: terraform apply AppDeploy.plan
    displayName: "Terraform Apply"
    workingDirectory: $(System.DefaultWorkingDirectory)/Terraform/Application
